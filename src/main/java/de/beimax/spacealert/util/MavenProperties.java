/**
 * 
 */
package de.beimax.spacealert.util;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;

/**
 * Access to the Maven pom.properties file.
 * 
 * Thanks to:
 * http://michael.hoennig.de/2009/08/12/maven-versionsnummer-aus-pom-xml-und-build-zeitstempel-mit-java-auslesen/
 * 
 * The complete path where Maven puts its properties:
 * /META-INF/maven/GRPUP_ID/ARTIFACT_ID/pom.properties
 */
public class MavenProperties {
	private static final String PATH_PREFIX = "/META-INF/maven/";
	private static final String PATH_POSTFIX = "/pom.properties";

	final String propertiesPath;

	private String versionTimestamp = "";
	private String versionNumber = "";

	/**
	 * Uses the resource path from classForResource to load the pom.properties
	 * of the given groupID and artifactID.
	 */
	public MavenProperties(final String groupID, final String artifactID) {
		propertiesPath = PATH_PREFIX + groupID + "/" + artifactID
				+ PATH_POSTFIX;

		try {
			final InputStream resourceStream = getResourceAsStream(propertiesPath);
			LineNumberReader reader = new LineNumberReader(
					new InputStreamReader(resourceStream));

			// skip "#Generated by Maven"
			reader.readLine();

			// read "#timestamp"
			versionTimestamp = reader.readLine().substring(1);

			// find "version=..."
			String line;
			while (null != (line = reader.readLine())) {
				String[] parts = line.split("[ \t]*=[ \t]*");
				if ("version".equals(parts[0])) {
					versionNumber = parts[1];
					break;
				}
			}

			reader.close();

		} catch (Exception e) {
			// can't load pom.properites => version information will be
			// unavailable
		}
	}

	// / allows for overriding the resource loading, e.g. in tests
	protected InputStream getResourceAsStream(String propertiesPath) {
		return getClass().getResourceAsStream(propertiesPath);
	}

	/**
	 * Returns the timestamp from the Maven generated pom.properies or "" if not
	 * available.
	 **/
	public String getVersionTimestamp() {
		return versionTimestamp;
	}

	/**
	 * Returns the version number from the Maven generated pom.properies or ""
	 * if not available.
	 **/
	public String getVersionNumber() {
		return versionNumber;
	}
}
